/*
 *  check_foulplay.c
 *  Program to check the output of a submission for "Foul Play".
 *
 *  This output checker is designed to work with the DOM-Judge wrapper
 *  script "compare_wrapper".
 *
 *  This output checker expects three command line arguments:
 *    argv[1] = name of test input file
 *    argv[2] = name of file containing output from submitted program
 *    argv[3] = name of file containing official test output
 *
 *  If the output is correct, nothing is written to stdout and
 *  the checker exits with status code 0.
 *
 *  If the output is incorrect, an error report is written to stdout
 *  and the checker exits with status code 0.
 *
 *  If the input file is incorrect, the checker exits with status code 1.
 *
 *  This output checker is written in ANSI C89.
 *  Compile with: gcc -std=c89 -Wall -O2 -o check_foulplay check_foulplay.c
 */


#include <stdlib.h>
#include <stdio.h>
#include <stdarg.h>
#include <ctype.h>
#include <errno.h>
#include <limits.h>
#include <string.h>


#define MIN_TEAMS	2
#define MAX_TEAMS	1024


struct testcase {
	int n_teams;
	char beats[MAX_TEAMS][MAX_TEAMS];
};


struct answer {
	int match[MAX_TEAMS][2];
};


#ifdef __GNUC__
void checker_failed(const char *fmt, ...)
	__attribute__ ((format (printf, 1, 2)));
#endif
void checker_failed(const char *fmt, ...)
{
	va_list ap;
	va_start(ap, fmt);

	fprintf(stderr, "check_foulplay: ERROR: ");
	vfprintf(stderr, fmt, ap);
	fprintf(stderr, "\n");
	exit(1);

	va_end(ap);
}


/* Read test case from jury input file.  Return 0 if ok, 1 if EOF. */
int read_input(FILE *f, struct testcase *tc)
{
	char sbuf[4096];
	char *p;
	long n;
	int j, k, nfriend;

	/* Read number of teams. */
	if (fgets(sbuf, sizeof(sbuf), f) == NULL)
		return 1;

	if (!isdigit(sbuf[0]))
		checker_failed("Bad test input (number format)");
	n = strtol(sbuf, &p, 10);
	if (p == sbuf || p[0] != '\n' || p[1] != '\0')
		checker_failed("Bad test input (number format)");

	/* Check number of teams. */
	if (n < MIN_TEAMS || n > MAX_TEAMS)
		checker_failed("Bad test input (number of teams)");

	for (k = n; k % 2 == 0; k = k / 2) ;
	if (k != 1)
		checker_failed("Bad test input (number of teams)");

	tc->n_teams = n;

	/* Read team strength matrix. */
	for (j = 0; j < n; j++) {
		size_t slen;

		if (fgets(sbuf, sizeof(sbuf), f) == NULL)
			checker_failed("Bad test input (unexpected end of input)");

		slen = strlen(sbuf);
		if (slen != n + 1 || sbuf[slen-1] != '\n')
			checker_failed("Bad test input (line length)");

		for (k = 0; k < n; k++) {
			if (sbuf[k] != '0' && sbuf[k] != '1')
				checker_failed("Bad test input (strange character)");
			tc->beats[j][k] = (sbuf[k] == '1');
		}
	}

	/* Check zeros on diagonal. */
	for (j = 0; j < n; j++)
		if (tc->beats[j][j] != 0)
			checker_failed("Bad test input (non-zero diagonal)");

	/* Check anti-symmetric matrix. */
	for (j = 0; j < n; j++)
		for (k = 0; k < n; k++)
			if (j != k && tc->beats[j][k] + tc->beats[k][j] != 1)
				checker_failed("Bad test input (contradiction in matrix)");

	/* Check that first team beats at least half. */
	nfriend = 0;
	for (k = 1; k < n; k++)
		if (tc->beats[0][k])
			nfriend++;
	if (2 * nfriend < n)
		checker_failed("Bad test input (favorite team too weak)");

	/* Check that for every team K that beats team 1, there exists
	   a team J that loses from team 1 but beats K. */
	for (k = 1; k < n; k++) {
		if (tc->beats[k][0]) {
			int ok = 0;
			for (j = 1; j < n; j++) {
				if (tc->beats[0][j] && tc->beats[j][k])
					ok = 1;
			}
			if (!ok)
				checker_failed("Bad test input (team 1 not king)");
		}
	}

	return 0;
}


/* Remove white space from beginnind and end of string. */
void strip(char *s)
{
	int k, p;

	/* Skip leading white space. */
	p = 0;
	while (s[p] != '\0' && isspace(s[p]))
		p++;

	/* Copy content. */
	k = 0;
	while (s[p] != '\0')
		s[k++] = s[p++];

	/* Remove trailing white space. */
	while (k > 0 && isspace(s[k-1]))
		k--;

	s[k] = '\0';
}


/* Read answer from program output file. Return 0 if ok, 1 if format error. */
int read_answer(FILE *f,
                const struct testcase *tc,
                struct answer *ans,
                int testcase_idx)
{
	char sbuf[4096];
	int j;

	/* Read tournament schedule. */
	for (j = 0; j < tc->n_teams - 1; j++) {
		long x, y;
		char *p, *pp;

		if (fgets(sbuf, sizeof(sbuf), f) == NULL) {
			printf("Testcase %d: unexpected end of output file\n", testcase_idx);
			return 1;
		}

		/* Strip white space. */
		strip(sbuf);

		/* Read two integers. */
		x = strtol(sbuf, &p, 10);
		y = strtol(p, &pp, 10);

		if (p == sbuf || pp == p || *pp != '\0') {
			printf("Testcase %d: bad format in tournament schedule '%s'\n", testcase_idx, sbuf);
			return 1;
		}

		if (x < 0 || x > INT_MAX || y < 0 || y > INT_MAX) {
			printf("Testcase %d: bad format in tournament schedule '%s'\n", testcase_idx, sbuf);
			return 1;
		}

		ans->match[j][0] = x;
		ans->match[j][1] = y;
	}

	return 0;
}


/* Check that end-of-file has been reached, but ignore extra white space. */
void check_eof(FILE *f)
{
	char sbuf[4096];
	while (fgets(sbuf, sizeof(sbuf), f) != NULL) {
		int i;
		for (i = 0; sbuf[i] != '\0'; i++) {
			if (!isspace(sbuf[i])) {
				printf("Unexpected data at end of output file.\n");
				return;
			}
		}
	}
}


/* Check answer and print diagnostics in case of wrong answer. */
void check_answer(const struct testcase *tc,
                  const struct answer *prog_ans,
                  int testcase_idx)
{
	int team_active[MAX_TEAMS];
	int team_played[MAX_TEAMS];
	int n, k, p;

	/* Initially, all teams are still in the tournament. */
	n = tc->n_teams;
	for (k = 0; k < tc->n_teams; k++)
		team_active[k] = 1;

	p = 0;
	while (n > 1) {
		/* Play one round. */

		/* No team has played yet during this round. */
		for (k = 0; k < tc->n_teams; k++)
			team_played[k] = 0;

		for (k = 0; k < n / 2; k++) {
			int x = prog_ans->match[p][0];
			int y = prog_ans->match[p][1];
			p++;

			if (x < 1 || x > tc->n_teams) {
				printf("Testcase %d: invalid team index %d in program output\n", testcase_idx, x);
				return;
			}

			if (y < 1 || y > tc->n_teams) {
				printf("Testcase %d: invalid team index %d in program output\n", testcase_idx, y);
				return;
			}

			if (x == y) {
				printf("Testcase %d: team %d plays against itself in program output\n", testcase_idx, x);
				return;
			}

			if (team_played[x-1]) {
				printf("Testcase %d: program lets team %d play twice in same round\n", testcase_idx, x);
				return;
			}

			if (team_played[y-1]) {
				printf("Testcase %d: program lets team %d play twice in same round\n", testcase_idx, y);
				return;
			}

			if (!team_active[x-1]) {
				printf("Testcase %d: program lets team %d play while already eliminated\n", testcase_idx, x);
				return;
			}

			if (!team_active[y-1]) {
				printf("Testcase %d: program lets team %d play while already eliminated\n", testcase_idx, y);
				return;
			}

			/* Mark both teams as having played in this round. */
			team_played[x-1] = 1;
			team_played[y-1] = 1;

			/* Kick the losing team out of the tournament. */
			if (tc->beats[x-1][y-1])
				team_active[y-1] = 0;
			else
				team_active[x-1] = 0;
		}

		n = n / 2;
	}

	/* Check that team 1 wins the tournament. */
	if (!team_active[0]) {
		printf("Testcase %d: program output does not result in team 1 winning tournament\n", testcase_idx);
		return;
	}

	/* Correct output; print nothing. */
}


int main(int argc, const char **argv)
{
	FILE *f_in, *f_prog;
	static struct testcase tc;
	static struct answer ans;
	int testcase_idx;

	if (argc != 4) {
		fprintf(stderr, "Usage: %s testdata.in prog.out testdata.out > report.txt\n", argv[0]);
		checker_failed("Incorrect invocation of check_foulplay");
	}

	f_in = fopen(argv[1], "r");
	if (f_in == NULL)
		checker_failed("Can not open test input file '%s' (%s)",
		               argv[1], strerror(errno));

	f_prog = fopen(argv[2], "r");
	if (f_prog == NULL)
		checker_failed("Can not open program output file '%s' (%s)",
		               argv[2], strerror(errno));

	/* Handle testcases. */
	for (testcase_idx = 1; ; testcase_idx++) {

		/* Read testcase; stop at end of input. */
		if (read_input(f_in, &tc) != 0) {

			/* Check that program output file has reached EOF. */
			check_eof(f_prog);

			/* Checking completed. */
			break;
		}

		/* Read program answer; stop if this fails. */
		if (read_answer(f_prog, &tc, &ans, testcase_idx) != 0)
			break;

		/* Compare answers. */
		check_answer(&tc, &ans, testcase_idx);
	}

	fclose(f_in);
	fclose(f_prog);

	return 0;
}

/* end */
